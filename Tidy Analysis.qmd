---
title: "Tidy Analysis"
author: "Eric Mossotti"

code-fold: true

df_print: "tibble" 

format: html
toc: true
---

```{r include= FALSE}

knitr::opts_chunk$set(message = FALSE, warning = FALSE)

```

# Project Environment Set Up

## 

*tidyverse-package {tidyverse}:*

> This package is designed to make it easy to install and load multiple 'tidyverse' packages in a single step.

```{r}

library ( tidyverse )
```

## Data Import

### Sourcing

```{r}

library(dplyr)

durls <- sprintf ( 
    "https://divvy-tripdata.s3.amazonaws.com/%d-divvy-tripdata.zip",
    202301:202312 )

zipNames <- sprintf ( "%d-divvy-tripdata.zip",
                      202301:202312 )
#tempfile {base}
tempZips <- tempfile ( zipNames )

# multi_download {curl}	
multi_download ( durls, destfiles = tempZips )

fileNames <- sprintf ( "%d-divvy-tripdata.csv",
                   202301:202312)
```

```{r}


```

## More Efficient Data Import with Arrow

[R for Data Science: Chapter 22: Arrow](https://r4ds.hadley.nz/arrow "Arrow")

```{r}


```

I am not sure if I should keep this all in one file or try to split files based on potential grouping before, after, or during cleaning.

Let's try to partition it out, then see how the performance differs.

```{r}

tibble ( files = list.files ( parquetPath,
                              
                              recursive = TRUE),
         
         size_MB = file.size (
             
             file.path (
                 
                 parquetPath,
                 
                 files ) ) / 1024^2 )
```

```{r}

tibble ( files = list.files ( "tripdata", 
                              
                              recursive = FALSE),
         
         size_MB = file.size ( 
             
             file.path ( "tripdata", files ) 
             
             ) / 1024^2
         )
```

```{r}
sum(file.size(file.path("tripdata", list.files("tripdata")))/1024^2)
```

There is a significant size difference between the parquet file and the csv files.

Trying the duckdb approach

```{r}

library(duckdb)
library(arrow)
library(curl)

durls <- sprintf ( 
    "https://divvy-tripdata.s3.amazonaws.com/%d-divvy-tripdata.zip",
    202301:202312 )

zipPaths <- sprintf ( "tripZips/%d-divvy-tripdata.zip",
                      202301:202312 )

filePaths <- sprintf ( "tripdata/%d-divvy-tripdata.csv",
                       202301:202312 )

pq_path <- "tripdata/ride_types"

dir.create ( "tripZips" )

dir.create ( "tripdata" )

dir.create ( "tripdata/ride_types" )

# multi_download {curl}	
multi_download ( durls, 
                 destfiles = zipPaths )

# open_dataset {arrow}	
trip_dataset <- open_dataset ( "tripdata", 
                               format = "csv" )

trip_dataset |>
    
    # group_by {dplyr}	
    group_by ( rideable_type ) |>
    
    # write_dataset {arrow}	
    write_dataset ( path = pq_path, 
                    format = "parquet" )

rideType_pq <- open_dataset ( pq_path )

# dbConnect {DBI}
dbcon <- dbConnect ( duckdb::duckdb () )

rideType_pq |>
    
    # to_duckdb {arrow}	
    to_duckdb ()
```

```{r}

# list.files {base}
csvFileList <- list.files ( path = "tripdata", 
                            full.names = TRUE )
```

View list.

```{r}

# view {tibble} 
print ( csvFileList )
```

### Data Mapping

```{r}

# map {purrr}, 

# With list_rbind(), map can be used to directly create a dataframe from a list of files

oneTibble <- map ( csvFileList[1:2], read_csv ) |>
    
    list_rbind  ()
```

( In R a tibble is synonymous with a data frame )

```{r}

typeof (oneTibble)
```

```{r}

is_tibble ( oneTibble )
```

```{r}
is.data.frame ( oneTibble )
```

```{r}
oneTibble[1,]
```

```{r}
length(oneTibble[[1]])
```

```{r}

# drop_na {tidyr}	
oneTibble <- drop_na ( oneTibble )
```

```{r}
tibble ( Complete_Observations = 
             length ( oneTibble [[1]] ) )
```

```{r}

# Should only need to check ride_id then datetime columns for duplicates

# Maybe only need to check ride_id column? Actually, no.

# pick {dplyr}	
distinct ( oneTibble, pick ( "ride_id" ) ) |>
    
    # count {dplyr}	
    count ( name = "Distinct Ride ID's" )
```

```{r}

length ( oneTibble [[1]] )
```

```{r}

# This is a separate table used to analyze the observations returned as not distinct (n > 1). This adds an extra column (n) so didn't want to mess with the main dataframe for this.

dupTibble <- oneTibble |>
    
    # adds a count of rows for column 'n'
    add_count ( started_at, 
                ended_at, 
                start_station_name, 
                end_station_name ) |>
    
    # so that only observations that have been duplicated 1 or more         times are shown
    filter ( n > 1 ) |>
    
    # will have to retest if I need this function
    distinct ( ) |>
    
    # because we want to see all the rows, not just one row for each obs
    ungroup ( ) |>
    
    arrange ( desc ( started_at ) )
```

```{r}

print ( dupTibble[3:4] )
```

```{r}

# verify how many rows have/are duplicates
 
# nrow {base}
nrow ( dupTibble )
```

```{r}

# issue is, we need to get rid of not all of these rows, but just the extra duplicate observations. 

# If there were 2 rows of duplicates, we would want to end up with 1 row after removing the extras.

undupdTibble <- dupTibble |>
    
    # distinct {dplyr}
    distinct ( started_at, 
               start_station_name, 
               ended_at, 
               end_station_name, 
               .keep_all = TRUE )
```

```{r}

print ( undupdTibble[3:4] )
```

```{r}

nrow ( undupdTibble )
```

```{r}

distinct ( oneTibble, pick ( "ride_id" ) ) |>
    
    # count {dplyr}	
    count ( name = "Uncorrected Distinct Observations" )
```

```{r}

distinct ( oneTibble, pick ( "started_at",
                             "start_station_name",
                             "ended_at", 
                             "end_station_name" ) ) |>
    # count {dplyr}	
    count ( name = "Corrected Distinct Observations" )
```

```{r}

oneTibble <- oneTibble |>
    
    distinct ( started_at, 
               start_station_name, 
               ended_at, 
               end_station_name, 
               .keep_all = TRUE )
```

```{r}
count ( oneTibble,
        name =
            "Total Observations: Un-duplicated Dataset" )
```

```{r}
# sorting the entire table by the start_at column
oneTibble[3] |>
    
    # arrange {dplyr}	
    arrange ( started_at ) |>
    
    head ()
```

```{r}

oneTibble <- oneTibble |>

    # arrange {dplyr}
    arrange ( started_at )
```

```{r}
print(head(oneTibble[3:4]))
```

```{r}

# Split cells
oneTibble[3] |>
    
    # separate_wider_delim {tidyr}
    separate_wider_delim ( cols = c(started_at),
                           delim = " ",
                           names = c("start_date", 
                                    "start_time"),
                           cols_remove = TRUE) |>
    head()
```

```{r}
# Split cells
oneTibble[3] |>
    
    # separate_wider_delim {tidyr}
    separate_wider_delim ( cols = c(started_at),
                           delim = " ",
                           names = c("start_date", 
                                    "start_time"),
                           cols_remove = TRUE ) |>
    head ()
```

```{r}

oneTibble[4] |>
    
    separate_wider_delim ( cols = c(ended_at),
                           delim = " ",
                           names = c("end_date", 
                                    "end_time"),
                           cols_remove = TRUE ) |>
    
    head()
```

```{r}
# Split cells
oneTibble <- oneTibble |>
    
    # separate_wider_delim {tidyr}
    separate_wider_delim ( cols = c ( started_at ),
                           delim = " ",
                           names = c ( "start_date",
                                       "start_time" ),
                           cols_remove = TRUE )
```

```{r}
tibble_row ( "How many columns?" = ncol ( oneTibble ) )
```

```{r}

oneTibble <- oneTibble |>
    
    separate_wider_delim ( cols = c(ended_at),
                           delim = " ",
                           names = c("end_date", 
                                    "end_time"),
                           cols_remove = TRUE )
```

```{r}
tibble_row ( "How many columns?" = ncol ( oneTibble ) )
```

Â 

```{r}

head ( oneTibble )
```

```{r}

oneTibble2 <- oneTibble |>
    
    group_by ( rideable_type ) |>
    
    # nest {tidyr}
    nest ()
```
